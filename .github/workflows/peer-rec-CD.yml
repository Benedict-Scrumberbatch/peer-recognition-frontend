# This is a basic workflow to help you get started with Actions

name: CD-frontend

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Checkout the repository and initialize submodules
  initialize-git:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      - run: git submodule init
      - run: git submodule update
      - name: publish artifacts
        uses: actions/upload-artifact@v2
        with:
          name: source
          path: ./
  
  # Run node/npm set-up tasks
  node-npm-actions:
    needs: initialize-git
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: source
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5
      - uses: c-hive/gha-npm-cache@v1
      - run: npm install
      # # - run: npm run build # might not need to run build at all in this stage

  # generate auto documentation and push to github pages
  github-pages-documentaion:
    needs: node-npm-actions
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: source
      # - run: npm run docs
      # - name: GitHub Pages
      #   # You may pin to the exact commit or the version.
      #   # uses: crazy-max/ghaction-github-pages@b8f8d291c97fe0edd9fb4ee73018163593418e8f
      #   uses: crazy-max/ghaction-github-pages@v2.3.0
      #   with:
      #     # Git branch where assets will be deployed
      #     target_branch: gh-pages
      #     # Build directory to deploy
      #     build_dir: docs
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.REPO_TOKEN_ACTIONS }}

  # test application before deploying
  testing-application:
    needs: node-npm-actions
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: source
      - run: npm run test

  # Push docker image to github packages
  docker-github-packages:
    needs: initialize-git
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: source
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          repository: benedict-scrumberbatch/peer-recognition-frontend-deployment-image
          tag_with_ref: true

  # Push docker image to heroku
  docker-heroku:
    needs: initialize-git
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: source
      - name: Deploy Docker Image to Heroku App
        uses: jctaveras/heroku-deploy@v2.1.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }} # your heroku email
          api_key: ${{ secrets.HEROKU_API_KEY }} # your heroku api key
          app_name: ${{ secrets.HEROKU_APP_NAME }} # you aplication name
          dockerfile_path: './' # set the path to the folder where the Dockerfile is located  
      
