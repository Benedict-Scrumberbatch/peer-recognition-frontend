# This is a basic workflow to help you get started with Actions

name: CD-frontend

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # verify application builds before deployment
  build-application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5   
      - uses: c-hive/gha-npm-cache@v1
      - run: npm install
      - run: npm run build

  # verify application tests all pass before deploying
  test-application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true 
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5   
      - uses: c-hive/gha-npm-cache@v1
      - run: npm install
      - run: npm run test

 # generate auto documentation and push to github pages
  github-pages-documentaion:
    runs-on: ubuntu-latest
    needs: [build-application, test-application]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true   
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5   
      - uses: c-hive/gha-npm-cache@v1
      - run: npm install
      # - run: npm run build # may or may not need to build for docs
      # - run: npm run docs
      # - name: GitHub Pages
      #   # You may pin to the exact commit or the version.
      #   # uses: crazy-max/ghaction-github-pages@b8f8d291c97fe0edd9fb4ee73018163593418e8f
      #   uses: crazy-max/ghaction-github-pages@v2.3.0
      #   with:
      #     # Git branch where assets will be deployed
      #     target_branch: gh-pages
      #     # Build directory to deploy
      #     build_dir: docs
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.REPO_TOKEN_ACTIONS }}


  npm-publish:
    runs-on: ubuntu-latest
    needs: [build-application, test-application]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true   
      - uses: c-hive/gha-npm-cache@v1
      - run: npm install
      - uses: mikeal/merge-release@master
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
            NPM_REGISTRY_URL: https://npm.pkg.github.com
      # - name: authenticate github package registry 
      #   uses: jgierer12/npm-auth-gpr@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      # - uses: c-hive/gha-npm-cache@v1
      # - run: npm install
      # - run: npm publish 
     


  # Push localhost docker image for app to github packages
  docker-app-localhost-github-packages:
    runs-on: ubuntu-latest
    needs: [build-application, test-application]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true    
      - uses: c-hive/gha-npm-cache@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: Benedict-Scrumberbatch
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            PORT=3000
            NPM_BUILD_SCRIPT=build
            NPM_RUN_SCRIPT=start:prod
          file: ./Dockerfile 
          push: true
          tags: ghcr.io/benedict-scrumberbatch/peer-recognition-frontend-localhost-docker-image:latest

  update-parent-repo:
    name: 'Submodule Update Parent'
    runs-on: ubuntu-latest
    needs: docker-app-localhost-github-packages
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Github REST API Call
      env:
        CI_TOKEN: ${{ secrets.CI_TOKEN }}
        PARENT_REPO: Benedict-Scrumberbatch/peer-recognition-deployment
        PARENT_BRANCH: master
        WORKFLOW_ID: 8649109
      run: |
        curl -fL --retry 3 -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ env.CI_TOKEN }}" https://api.github.com/repos/${{ env.PARENT_REPO }}/actions/workflows/${{ env.WORKFLOW_ID }}/dispatches -d '{"ref":"${{ env.PARENT_BRANCH }}"}'


# Push aws docker image for app to github packages
  docker-app-aws-github-packages:
    needs: [build-application, test-application]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true   
      - uses: c-hive/gha-npm-cache@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: Benedict-Scrumberbatch
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            PORT=4200
            NPM_BUILD_SCRIPT=build:aws
            NPM_RUN_SCRIPT=start:prod:aws
          file: ./Dockerfile 
          push: true
          tags: ghcr.io/benedict-scrumberbatch/peer-recognition-fronend-aws-docker-image:latest

  aws-ecs-deployment:
    runs-on: ubuntu-latest
    needs: docker-app-aws-github-packages
    steps:
      # - run: echo "skipping due to failing auth credentials"
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1
      - run: aws ecs list-clusters
      - run: aws ecs list-services --cluster ECS-Deployment-Cluster
      # alternative to storing task def in repo would be to download at execution
      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition my-task-definition-family --query taskDefinition > task-definition.json
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          service: ECS-Deployment-Service-Frontend
          cluster: ECS-Deployment-Cluster
          wait-for-service-stability: true  

  # Push app docker image to heroku
  app-docker-heroku:
    runs-on: ubuntu-latest
    needs: [build-application, test-application]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true  
      - uses: c-hive/gha-npm-cache@v1
      - name: Deploy Docker Image to Heroku App
        uses: AkhileshNS/heroku-deploy@v3.12.12
        with:
          heroku_email: ${{ secrets.HEROKU_EMAIL }} # your heroku email
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }} # your heroku api key
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }} # you aplication name
          usedocker: true
          stack: container      
          docker_build_args: |
            NPM_BUILD_SCRIPT
            NPM_RUN_SCRIPT
        env:
          NPM_BUILD_SCRIPT: build:heroku
          NPM_RUN_SCRIPT: start:prod:heroku
